{"name":"Zehnder","type":"com.fibaro.deviceController","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_357"},"sections":{"items":[{"components":[{"name":"labelTitle","style":{"weight":"1.2"},"text":"Zehnder","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelMsg","style":{"weight":"1.2"},"text":"","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btnSearch","style":{"weight":"0.50"},"text":"Search","type":"button"},{"name":"btnRefresh","style":{"weight":"0.50"},"text":"Refresh","type":"button"}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labeldeviceId","style":{"weight":"1.2"},"text":"-","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labeltimestamp","style":{"weight":"1.2"},"text":"-","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btnPreset1","style":{"weight":"0.25"},"text":"Preset 1","type":"button"},{"name":"btnPreset2","style":{"weight":"0.25"},"text":"Preset 2","type":"button"},{"name":"btnPreset3","style":{"weight":"0.25"},"text":"Preset 3","type":"button"},{"name":"btnPreset4","style":{"weight":"0.25"},"text":"Preset 4","type":"button"}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btnScene1","style":{"weight":"0.20"},"text":"Scene 1","type":"button"},{"name":"btnScene2","style":{"weight":"0.20"},"text":"Scene 2","type":"button"},{"name":"btnScene3","style":{"weight":"0.20"},"text":"Scene 3","type":"button"},{"name":"btnScene4","style":{"weight":"0.20"},"text":"Scene 4","type":"button"},{"name":"btnScene5","style":{"weight":"0.20"},"text":"Scene 5","type":"button"}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelventilationPreset","style":{"weight":"1.2"},"text":"ventilationPreset","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelmanualMode","style":{"weight":"1.2"},"text":"manualMode","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelawayEnabled","style":{"weight":"1.2"},"text":"awayEnabled","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelboostTimerEnabled","style":{"weight":"1.2"},"text":"boostTimerEnabled","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelremainingFilterDuration","style":{"weight":"1.2"},"text":"remainingFilterDuration","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelextractAirTemp","style":{"weight":"1.2"},"text":"extractAirTemp","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelextractAirHumidity","style":{"weight":"1.2"},"text":"extractAirHumidity","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelexhaustAirTemp","style":{"weight":"1.2"},"text":"exhaustAirTemp","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelexhaustAirHumidity","style":{"weight":"1.2"},"text":"exhaustAirHumidity","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelsystemSupplyTemp","style":{"weight":"1.2"},"text":"systemSupplyTemp","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelsystemSupplyHumidity","style":{"weight":"1.2"},"text":"systemSupplyHumidity","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelsystemOutdoorTemp","style":{"weight":"1.2"},"text":"systemOutdoorTemp","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelsystemOutdoorHumidity","style":{"weight":"1.2"},"text":"systemOutdoorHumidity","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelsupplyFanOff","style":{"weight":"1.2"},"text":"supplyFanOff","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelsystemSupplySpeed","style":{"weight":"1.2"},"text":"systemSupplySpeed","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelsystemSupplyDuty","style":{"weight":"1.2"},"text":"systemSupplyDuty","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelsupplyFanAirFlow","style":{"weight":"1.2"},"text":"supplyFanAirFlow","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelexhaustFanOff","style":{"weight":"1.2"},"text":"exhaustFanOff","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelexhaustSpeed","style":{"weight":"1.2"},"text":"exhaustSpeed","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelexhaustDuty","style":{"weight":"1.2"},"text":"exhaustDuty","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelexhaustFanAirFlow","style":{"weight":"1.2"},"text":"exhaustFanAirFlow","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelcurrentVentilationPower","style":{"weight":"1.2"},"text":"currentVentilationPower","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelavoidedHeating","style":{"weight":"1.2"},"text":"avoidedHeating","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelavoidedCooling","style":{"weight":"1.2"},"text":"avoidedCooling","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelbypassMode","style":{"weight":"1.2"},"text":"bypassMode","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelbypassDuty","style":{"weight":"1.2"},"text":"bypassDuty","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelheatingSeason","style":{"weight":"1.2"},"text":"heatingSeason","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelcoolingSeason","style":{"weight":"1.2"},"text":"coolingSeason","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labellimitRMOTHeating","style":{"weight":"1.2"},"text":"limitRMOTHeating","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labellimitRMOTCooling","style":{"weight":"1.2"},"text":"limitRMOTCooling","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelrunningMeanOutdoorTemparature","style":{"weight":"1.2"},"text":"runningMeanOutdoorTemparature","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labeldeviceId","style":{"weight":"1.2"},"text":"deviceId","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labeltimeSeriesType","style":{"weight":"1.2"},"text":"timeSeriesType","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelfrostDuty","style":{"weight":"1.2"},"text":"frostDuty","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelrequiredTemperature","style":{"weight":"1.2"},"text":"requiredTemperature","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelanalogInput1","style":{"weight":"1.2"},"text":"analogInput1","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelanalogInput2","style":{"weight":"1.2"},"text":"analogInput2","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelanalogInput3","style":{"weight":"1.2"},"text":"analogInput3","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelanalogInput4","style":{"weight":"1.2"},"text":"analogInput4","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelpostSupplyAirTempAfterComfoCool","style":{"weight":"1.2"},"text":"postSupplyAirTempAfterComfoCool","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelexhaustAirTempAfterComfoCool","style":{"weight":"1.2"},"text":"exhaustAirTempAfterComfoCool","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelpostHeaterPresence","style":{"weight":"1.2"},"text":"postHeaterPresence","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelhoodPresence","style":{"weight":"1.2"},"text":"hoodPresence","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelhoodIsOn","style":{"weight":"1.2"},"text":"hoodIsOn","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelcomfoCoolCompressorState","style":{"weight":"1.2"},"text":"comfoCoolCompressorState","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelcomfortTemperatureMode","style":{"weight":"1.2"},"text":"comfortTemperatureMode","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelpassiveTemperatureMode","style":{"weight":"1.2"},"text":"passiveTemperatureMode","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labeltemperatureProfile","style":{"weight":"1.2"},"text":"temperatureProfile","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelventilationMode","style":{"weight":"1.2"},"text":"ventilationMode","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelpostHeaterMode","style":{"weight":"1.2"},"text":"postHeaterMode","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelwarmProfileTemp","style":{"weight":"1.2"},"text":"warmProfileTemp","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelcoolProfileTemp","style":{"weight":"1.2"},"text":"coolProfileTemp","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelnormalProfileTemp","style":{"weight":"1.2"},"text":"normalProfileTemp","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_357"}}},"uiCallbacks":[{"callback":"searchEvent","eventType":"onReleased","name":"btnSearch"},{"callback":"refreshEvent","eventType":"onReleased","name":"btnRefresh"},{"callback":"setVentilationPreset","eventType":"onReleased","name":"btnPreset1"},{"callback":"setVentilationPreset","eventType":"onReleased","name":"btnPreset2"},{"callback":"setVentilationPreset","eventType":"onReleased","name":"btnPreset3"},{"callback":"setVentilationPreset","eventType":"onReleased","name":"btnPreset4"},{"callback":"activateScene","eventType":"onReleased","name":"btnScene1"},{"callback":"activateScene","eventType":"onReleased","name":"btnScene2"},{"callback":"activateScene","eventType":"onReleased","name":"btnScene3"},{"callback":"activateScene","eventType":"onReleased","name":"btnScene4"},{"callback":"activateScene","eventType":"onReleased","name":"btnScene5"}],"quickAppVariables":[{"name":"SubscriptionKey","value":""},{"name":"Interval","value":"1"},{"name":"DeviceID","value":"5665846"},{"name":"BuildingId","value":""}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":false,"content":"_=loadfile and loadfile(\"TQAE.lua\"){}\n\n--FILE:dev/Config.lua,Config;\n--FILE:dev/Globals.lua,Globals;\n--FILE:dev/HTTPClient.lua,HTTPClient;\n--FILE:dev/i18n.lua,i18n;\n--FILE:dev/Zehnder.lua,Zehnder;\n--FILE:dev/Childs.lua,Childs;\n--FILE:dev/Toolbox.lua,Toolbox;\n--FILE:dev/Toolbox_child.lua,Toolbox_child;\n\n--%%name=\"Zehnder\"\n--%%id=350\n--%%type=\"com.fibaro.deviceController\"\n--%%quickVars={SubscriptionKey=\"\",Interval=\"1\"}\n--%%u1={label=\"labelTitle\", text=\"Zehnder\"}\n--%%u2={label=\"labelMsg\", text=\"\"}\n--%%u3={{button=\"btnSearch\",text=\"Search\",onReleased=\"searchEvent\"},{button=\"btnRefresh\",text=\"Refresh\",onReleased=\"refreshEvent\"}}\n--%%u4={label=\"labeldeviceId\", text=\"-\"}\n--%%u5={label=\"labeltimestamp\", text=\"-\"}\n--%%u6={{button=\"btnPreset1\", text=\"Preset 1\", onReleased=\"setVentilationPreset\"},{button=\"btnPreset2\", text=\"Preset 2\", onReleased=\"setVentilationPreset\"},{button=\"btnPreset3\", text=\"Preset 3\", onReleased=\"setVentilationPreset\"},{button=\"btnPreset4\", text=\"Preset 4\", onReleased=\"setVentilationPreset\"}}\n--%%u7={{button=\"btnScene1\", text=\"Scene 1\", onReleased=\"activateScene\"},{button=\"btnScene2\", text=\"Scene 2\", onReleased=\"activateScene\"},{button=\"btnScene3\", text=\"Scene 3\", onReleased=\"activateScene\"},{button=\"btnScene4\", text=\"Scene 4\", onReleased=\"activateScene\"},{button=\"btnScene5\", text=\"Scene 5\", onReleased=\"activateScene\"}}\n\n--%%u8={label=\"labelventilationPreset\", text=\"ventilationPreset\"}\n--%%u9={label=\"labelmanualMode\", text=\"manualMode\"}\n--%%u10={label=\"labelawayEnabled\", text=\"awayEnabled\"}\n--%%u11={label=\"labelboostTimerEnabled\", text=\"boostTimerEnabled\"}\n--%%u12={label=\"labelremainingFilterDuration\", text=\"remainingFilterDuration\"}\n\n--%%u13={label=\"labelextractAirTemp\", text=\"extractAirTemp\"}\n--%%u14={label=\"labelextractAirHumidity\", text=\"extractAirHumidity\"}\n--%%u15={label=\"labelexhaustAirTemp\", text=\"exhaustAirTemp\"}\n--%%u16={label=\"labelexhaustAirHumidity\", text=\"exhaustAirHumidity\"}\n--%%u17={label=\"labelsystemSupplyTemp\", text=\"systemSupplyTemp\"}\n--%%u18={label=\"labelsystemSupplyHumidity\", text=\"systemSupplyHumidity\"}\n--%%u19={label=\"labelsystemOutdoorTemp\", text=\"systemOutdoorTemp\"}\n--%%u20={label=\"labelsystemOutdoorHumidity\", text=\"systemOutdoorHumidity\"}\n\n--%%u21={label=\"labelsupplyFanOff\", text=\"supplyFanOff\"}\n--%%u22={label=\"labelsystemSupplySpeed\", text=\"systemSupplySpeed\"}\n--%%u23={label=\"labelsystemSupplyDuty\", text=\"systemSupplyDuty\"}\n--%%u24={label=\"labelsupplyFanAirFlow\", text=\"supplyFanAirFlow\"}\n--%%u25={label=\"labelexhaustFanOff\", text=\"exhaustFanOff\"}\n--%%u26={label=\"labelexhaustSpeed\", text=\"exhaustSpeed\"}\n--%%u27={label=\"labelexhaustDuty\", text=\"exhaustDuty\"}\n--%%u28={label=\"labelexhaustFanAirFlow\", text=\"exhaustFanAirFlow\"}\n\n--%%u29={label=\"labelcurrentVentilationPower\", text=\"currentVentilationPower\"}\n--%%u30={label=\"labelavoidedHeating\", text=\"avoidedHeating\"}\n--%%u31={label=\"labelavoidedCooling\", text=\"avoidedCooling\"}\n\n--%%u32={label=\"labelbypassMode\", text=\"bypassMode\"}\n--%%u33={label=\"labelbypassDuty\", text=\"bypassDuty\"}\n\n--%%u34={label=\"labelheatingSeason\", text=\"heatingSeason\"}\n--%%u35={label=\"labelcoolingSeason\", text=\"coolingSeason\"}\n--%%u36={label=\"labellimitRMOTHeating\", text=\"limitRMOTHeating\"}\n--%%u37={label=\"labellimitRMOTCooling\", text=\"limitRMOTCooling\"}\n--%%u38={label=\"labelrunningMeanOutdoorTemparature\", text=\"runningMeanOutdoorTemparature\"}\n\n--%%u39={label=\"labeldeviceId\", text=\"deviceId\"}\n--%%u40={label=\"labeltimeSeriesType\", text=\"timeSeriesType\"}\n--%%u41={label=\"labelfrostDuty\", text=\"frostDuty\"}\n--%%u42={label=\"labelrequiredTemperature\", text=\"requiredTemperature\"}\n--%%u43={label=\"labelanalogInput1\", text=\"analogInput1\"}\n--%%u44={label=\"labelanalogInput2\", text=\"analogInput2\"}\n--%%u45={label=\"labelanalogInput3\", text=\"analogInput3\"}\n--%%u46={label=\"labelanalogInput4\", text=\"analogInput4\"}\n--%%u47={label=\"labelpostSupplyAirTempAfterComfoCool\", text=\"postSupplyAirTempAfterComfoCool\"}\n--%%u48={label=\"labelexhaustAirTempAfterComfoCool\", text=\"exhaustAirTempAfterComfoCool\"}\n--%%u49={label=\"labelpostHeaterPresence\", text=\"postHeaterPresence\"}\n--%%u50={label=\"labelhoodPresence\", text=\"hoodPresence\"}\n--%%u51={label=\"labelhoodIsOn\", text=\"hoodIsOn\"}\n--%%u52={label=\"labelcomfoCoolCompressorState\", text=\"comfoCoolCompressorState\"}\n--%%u53={label=\"labelcomfortTemperatureMode\", text=\"comfortTemperatureMode\"}\n--%%u54={label=\"labelpassiveTemperatureMode\", text=\"passiveTemperatureMode\"}\n--%%u55={label=\"labeltemperatureProfile\", text=\"temperatureProfile\"}\n--%%u56={label=\"labelventilationMode\", text=\"ventilationMode\"}\n--%%u57={label=\"labelpostHeaterMode\", text=\"postHeaterMode\"}\n--%%u58={label=\"labelwarmProfileTemp\", text=\"warmProfileTemp\"}\n--%%u59={label=\"labelcoolProfileTemp\", text=\"coolProfileTemp\"}\n--%%u60={label=\"labelnormalProfileTemp\", text=\"normalProfileTemp\"}\n\n\n--function QuickApp:copyToolbox(a,b)local c=api.get((\"/quickApp/%s/files/%s\"):format(a,b))assert(c,\"File doesn't exists\")local d=api.get((\"/quickApp/%s/files/%s\"):format(self.id,b))if not d then local e,f=api.post((\"/quickApp/%s/files\"):format(self.id),c)if f==200 then self:debug(\"File '\",b,\"' added\")else self:error(\"Error:\",f)end elseif d.content~=c.content then local e,f=api.put((\"/quickApp/%s/files/%s\"):format(self.id,b),c)if f==200 then self:debug(\"File '\",b,\"' updated\")else self:error(\"Error:\",f)end else self:debug(\"File '\",b,\"' up to date\")end end\n\nlocal _version = \"1.0\"\nmodules = {\"childs\"}\n\nfunction QuickApp:onInit()\n  self.i18n = i18n:new(api.get(\"/settings/info\").defaultLanguage)\n  self.config = Config:new(self)\n  self.config.baseUrl = 'https://zehnder-prod-we-apim.azure-api.net/cloud/api/v2.1/'\n  self.zehnder = Zehnder:new(self.config)\n\n  self.title = \"Zehnder Cloud Api - v2.1\"\n  self.presets = {\"Away\",\"Low\",\"Medium\",\"High\"} -- Ventilation presets\n  self.mode = {\"Cool\",\"Normal\",\"Warm\"}\n  self.mode2 = {\"Adaptive\",\"Fixed\"}\n  self.mode3 = {\"Off\",\"Autoonly\",\"On\"}\n  self.deviceData = {}\n  self.deviceState = {}\n  \n--  self:copyToolbox(185,\"Toolbox\")\n--  self:copyToolbox(185,\"Toolbox_child\")\n  \n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all my children \n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs==0 then -- No children, create children\n    local initChildData = { -- Just my own local table to be able to make a loop - you may get your initial data elsewhere...\n      {className=\"ventilationPreset\", type=\"com.fibaro.multilevelSwitch\", value=0, unit=''}, -- ,otherData=\n      {className=\"remainingFilterDuration\", type=\"com.fibaro.multilevelSensor\", value=0, unit=self.i18n:get('unitDays')}, -- ,otherData=\n    }\n    for _,c in ipairs(initChildData) do\n      local child = self:createChildDevice(\n        {name = self.i18n:get(c.className..\"ChildName\"),\n          type=c.type,\n          value=c.value,\n          unit=c.unit,\n          initialProperties = {}, -- Add properties if you need\n          initialInterfaces = {}, -- Add interfaces if you need\n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n--      child.otherData = c.otherData\n      child:setVariable(\"className\",c.className)  -- Save class name so we know when we load it next time\n--      child:setVariable(\"otherData\",tostring(c.otherData)) -- Save other data\n    end   \n  else  -- Ok, we already have children, instantiate them with the correct class\n    -- This is more or less what self:initChildDevices does but this can handle mapping different classes to the same type...\n    for _,child in ipairs(cdevs) do\n      local className = self:getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the contstructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self          -- Setup parent link to device controller\n--      childObject.otherData = tonumber(childObject:getVariable(\"otherData\")) -- we stored a number...\n    end\n  end\n  \n  self:trace(self.title)\n  self:updateView(\"labelTitle\", \"text\", self.title)\n  self:updateView(\"btnSearch\", \"text\", self.i18n:get('search-devices'))\n  if not self:varCheck() then return end\n  self:pullHealth()\n  self:setSceneButtons()\n  self:run()\nend\n\nfunction QuickApp:run()\n  self:updateDeviceState()\n  local interval = self.config:getTimeoutInterval()\n  if (interval > 0) then\n    fibaro.setTimeout(interval, function() self:run() end)\n  end\nend\n\nfunction QuickApp:varCheck()\n  -- Check SubscriptionKey\n  if self.config:getSubscriptionKey() == \"\" then\n    self:updateView(\"labelMsg\", \"text\", \"Please supply the SubscriptionKey variable!\")\n    return 0\n  end\n--  self:debug(\"SubscriptionKey: \",self:getVariable(\"SubscriptionKey\"))\n  -- Passed all checks\n  self:updateView(\"labelMsg\", \"text\", \"All variables are available!\")\n  return 1\nend\n\nfunction QuickApp:pullHealth()\n  self:trace(\"Start pullHealth\")\n  local interval = self.config:getTimeoutInterval()\n  local getHealthCallback = function(healthData)\n    self:updateView(\"labelTitle\", \"text\",  self.title .. \" - \" .. healthData.status )\n    self:trace(\"End pullHealth\")\n  end\n  self.zehnder:getHealth(getHealthCallback)\n  if (interval > 0) then\n    fibaro.setTimeout(interval, function() self:pullHealth() end)\n  end\nend\n\nfunction QuickApp:setSceneButtons()\n  local getScenesCallback = function(scenes)\n    for __, scene in pairs(scenes) do\n        self:updateView(\"btnScene\"..tostring(scene.id), \"text\", scene.name)\n    end\n    self:debug(\"Scenes received and button labels updated\")\n  end\n  self.zehnder:getScenes(getScenesCallback)\nend\n\nfunction QuickApp:searchEvent(callback)\n  self:trace(\"Start searchEvent\")\n  self:updateView(\"btnSearch\", \"text\", self.i18n:get('searching-devices'))\n  local getDevicesIdsCallback = function(ids)\n    if ids[1] ~= nil then\n      self:updateView(\"labelDeviceID\", \"text\", tostring(ids[1]))\n      self:setVariable(\"DeviceID\", tostring(ids[1]))\n      self:debug(\"DeviceID: \", self:getVariable(\"DeviceID\"))\n      if callback ~= nil then callback() end\n    end\n    self:trace(\"End searchEvent\")\n    self:updateView(\"btnSearch\", \"text\", self.i18n:get('search-devices'))\n  end\n  self.zehnder:getDevicesIds(getDevicesIdsCallback)\nend\n\nfunction QuickApp:refreshEvent(callback)\n  self:trace(\"Start refreshEvent\")\n  self:updateView(\"btnRefresh\", \"text\", self.i18n:get('refreshing'))\n  if self:getVariable(\"DeviceID\") == \"\" then\n    local refreshEventCallback = function()\n      self:refreshEvent()\n    end\n    self:searchEvent(refreshEventCallback)\n    return\n  end\n  self:updateDeviceData()\n  self:updateDeviceState()\n  if callback ~= nil then callback() end\nend\n\nfunction QuickApp:updateDeviceData(callback)\n  self:trace(\"Start updateDeviceData\")\n  local getDeviceCallback = function(deviceData)\n--    QuickApp:debug(dump(deviceData))\n    self:debug(\"buildingId: \", deviceData[\"buildingId\"])\n    self.deviceData = deviceData\n    self:updateView(\"btnRefresh\", \"text\", self.i18n:get('refresh'))\n--    self:updateView(\"labelMsg\", \"text\", string.format(self.i18n:get('last-update'), os.date('%Y-%m-%d %H:%M:%S')))\n    if callback ~= nil then callback() end\n    self:trace(\"End updateDeviceData\")\n  end\n  self.zehnder:getDevice(self:getVariable(\"DeviceID\"),getDeviceCallback)\nend\n\nfunction QuickApp:updateDeviceState(callback)\n  self:trace(\"Start updateDeviceState\")\n  if self:getVariable(\"DeviceID\") == \"\" then\n    local callback = function()\n      self:updateDeviceState()\n    end\n    self:searchEvent(callback)\n    return\n  end\n  local getDeviceStateCallback = function(deviceState)\n--    QuickApp:debug(dump(deviceState))\n    self.deviceState = deviceState\n    self:updateUIdeviceState(deviceState)\n    self:updateView(\"btnRefresh\", \"text\", self.i18n:get('refresh'))\n    self:updateView(\"labelMsg\", \"text\", string.format(self.i18n:get('last-update'), os.date('%Y-%m-%d %H:%M:%S')))\n    if callback ~= nil then callback() end\n    for id, child in pairs(self.childDevices) do\n      QuickApp:debug(\"Child: \"..child.name)\n      child:updateValue()\n    end\n    self:trace(\"End updateDeviceState\")\n  end\n  self.zehnder:getDeviceState(self:getVariable(\"DeviceID\"),getDeviceStateCallback)\nend\n\nfunction QuickApp:updateUIdeviceState(deviceState)\n  self:uiUpdateLabel(\"deviceId\",deviceState.deviceId)\n  self:uiUpdateLabel(\"deviceId\",deviceState.deviceId)\n  --QuickApp:debug(\"Timestamp: \"..deviceState.timestamp)\n  local pattern = \"(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+)%+(%d+):(%d+)\"\n  local runyear, runmonth, runday, runhour, runminute, runseconds = deviceState.timestamp:match(pattern)\n  local offset=os.time()-os.time(os.date(\"!*t\"))-os.time({year=1970, month=1, day=1, hour=0})\n  local convertedTimestamp = os.time({year = runyear, month = runmonth, day = runday, hour = runhour, min = runminute, sec = runseconds})+offset\n  --QuickApp:debug(convertedTimestamp)\n  --QuickApp:debug(\"Converted Timestamp: \"..os.date(\"!%Y-%m-%d %X\",convertedTimestamp))\n  self:uiUpdateLabel(\"timestamp\",os.date(\"!%Y-%m-%d %X\",convertedTimestamp))\n  for k, v in pairs(deviceState.values) do\n    if k == \"ventilationPreset\" then\n      -- Update Preset Buttons to current state\n      local index = tonumber(v)+1\n      self:updatePresetButtons(index)\n    else\n      self:uiUpdateLabel(k,v)\n    end\n  end\nend\n\nfunction QuickApp:updatePresetButtons(index)\n  for ip, preset in ipairs(self.presets) do\n    if ip == index then\n      preset = string.upper(preset)\n      self:uiUpdateLabel(k,preset)\n    end\n    self:updateView(\"btnPreset\"..ip, \"text\", preset)\n  end\nend\n\nfunction QuickApp:uiUpdateLabel(elm,value)\n  if elm == nil or value == nil then return end\n  elm = tostring(elm)\n  value = tostring(value)\n  if elm == \"exhaustAirTemp\"\n  or elm == \"systemOutdoorTemp\"\n  or elm == \"runningMeanOutdoorTemparature\"\n  or elm == \"requiredTemperature\"\n  or elm == \"postSupplyAirTempAfterComfoCool\"\n  or elm == \"exhaustAirTempAfterComfoCool\"\n  or elm == \"extractAirTemp\"\n  or elm == \"limitRMOTCooling\"\n  or elm == \"limitRMOTHeating\"\n  or elm == \"warmProfileTemp\"\n  or elm == \"coolProfileTemp\"\n  or elm == \"normalProfileTemp\"\n  then\n    value = tonumber(value)/10\n  end\n  if elm == \"temperatureProfile\"\n  or elm == \"ventilationMode\"\n  or elm == \"postHeaterMode\"\n  or elm == \"bypassMode\"\n  then\n    value = self.mode[tonumber(value)+1]\n  end\n  if elm == \"comfortTemperatureMode\"\n  then\n    value = self.mode2[tonumber(value)+1]\n  end\n  if elm == \"passiveTemperatureMode\"\n  then\n    value = self.mode3[tonumber(value)+1]\n  end\n  -- Update Labels to corresponding language template\n  self:updateView(\"label\"..elm, \"text\", string.format(self.i18n:get(elm), value))\nend\n\nfunction QuickApp:activateScene(e)\n  self:debug(\"Start activate scene\")\n  if self.deviceData.buildingId == nil then\n      self:debug(\"activateScene: No building Id!\")\n      return\n  end\n  local buildingId = self.deviceData.buildingId\n  local sceneId = string.sub(e.elementName,-1,-1)\n  local activateSceneCallback = function ()\n    self:debug(\"Scene is set\")\n  end\n  self.zehnder:activateScene(buildingId, sceneId, callback)\nend\n\nfunction QuickApp:setVentilationPreset(e)\n  self:debug(\"setVentilationPreset input: \"..type(e))\n  self:debug(\"Start setting Ventilation Preset\")\n  local preset = ''\n  if type(e) == \"string\" then preset = e else preset = self.presets[tonumber(string.sub(e.elementName,-1,-1))] end\n  self:updatePresetButtons(preset)\n  local commands = {\n    setVentilationPreset = {\n      value = preset\n    }\n  }\n  local setVentilationPresetCallback = function ()\n    self:debug(\"Ventilation preset is set\")\n    --self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, setVentilationPresetCallback)\nend\n\nfunction QuickApp:setManualMode(enabled) -- boolean\n  local commands = {\n    [\"setManualMode\"] = {\n        [\"enabled\"] = enabled\n    }\n  }\n  local callback = function ()\n    self:debug(\"Manual mode is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setAway(enabled, date) -- enabled = boolean, until = int\n  local commands = {\n    [\"setAway\"] = {\n        [\"enabled\"] = enabled,\n        [\"until\"] = date\n    }\n  }\n  local callback = function ()\n    self:debug(\"Away is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setBoostTimer(seconds) -- int optional\n  local commands = {\n    [\"setBoostTimer\"] = {}\n  }\n  if seconds ~= nil or seconds ~= 0 then\n    commands[\"setBoostTimer\"][\"seconds\"] = seconds\n  end\n  local callback = function ()\n    self:debug(\"Booster is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setTemperatureProfileTemperature(mode, temperature)\n  local commands = {\n    [\"setTemperatureProfileTemperature\"] = {\n        [\"mode\"] = mode,\n        [\"temperature\"] = temperature\n    }\n  }\n  local callback = function ()\n    self:debug(\"Temperature for Temperature Profile is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setTemperatureProfile(mode)\n  local commands = {\n    [\"setTemperatureProfile\"] = {\n        [\"mode\"] = mode\n    }\n  }\n  local callback = function ()\n    self:debug(\"Temperature Prolfile is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setComfortMode(mode) -- mode2\n  local commands = {\n    [\"setComfortMode\"] = {\n        [\"mode\"] = mode\n    }\n  }\n  local callback = function ()\n    self:debug(\"Comfort Mode is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setPassiveTemperatureMode(mode) -- mode3\n  local commands = {\n    [\"setPassiveTemperatureMode\"] = {\n        [\"mode\"] = mode\n    }\n  }\n  local callback = function ()\n    self:debug(\"Passive Temperature Mode is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setHumidityComfortMode(mode) -- mode3\n  local commands = {\n    [\"setHumidityComfortMode\"] = {\n        [\"mode\"] = mode\n    }\n  }\n  local callback = function ()\n    self:debug(\"Humidity Comfort Mode is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setHumidityProtectionMode(mode) -- mode3\n  local commands = {\n    [\"setHumidityProtectionMode\"] = {\n        [\"mode\"] = mode\n    }\n  }\n  local callback = function ()\n    self:debug(\"Humidity Protection Mode is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setRMOTCool(temperature) -- int\n  local commands = {\n    [\"setRMOTCool\"] = {\n        [\"temperature\"] = temperature\n    }\n  }\n  local callback = function ()\n    self:debug(\"RMOT Cool is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setRMOTHeat(temperature) -- int\n  local commands = {\n    [\"setRMOTHeat\"] = {\n        [\"temperature\"] = temperature\n    }\n  }\n  local callback = function ()\n    self:debug(\"RMOT Heat is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setExhaustFanOff(seconds) -- int\n  local commands = {\n    [\"setExhaustFanOff\"] = {\n        [\"seconds\"] = seconds\n    }\n  }\n  local callback = function ()\n    self:debug(\"Exhaust Fan Off is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:setSupplyFanOff(seconds) -- int\n  local commands = {\n    [\"setSupplyFanOff\"] = {\n        [\"seconds\"] = seconds\n    }\n  }\n  local callback = function ()\n    self:debug(\"Supply Fan Off is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\nfunction QuickApp:forceBypass(seconds) -- int optional\n  local commands = {\n    [\"forceBypass\"] = {}\n  }\n  if seconds ~= nil or seconds ~= 0 then\n    commands[\"forceBypass\"][\"seconds\"] = seconds\n  end\n  local callback = function ()\n    self:debug(\"force Bypass is set\")\n    self:updateDeviceState()\n  end\n  self.zehnder:putComfosysCommand(self:getVariable(\"DeviceID\"), commands, callback)\nend\n\n\nfunction SecondsToClock(seconds)\n  local seconds = tonumber(seconds)\n  if seconds <= 0 then\n    return \"00:00:00\";\n  else\n    hours = string.format(\"%02.f\", math.floor(seconds/3600));\n    mins = string.format(\"%02.f\", math.floor(seconds/60 - (hours*60)));\n    secs = string.format(\"%02.f\", math.floor(seconds - hours*3600 - mins *60));\n    return hours..\" =\"..mins..\" =\"..secs\n  end\nend\n\nfunction dump(o)\n   if type(o) == 'table' then\n      local s = '{ '\n      for k,v in pairs(o) do\n         if type(k) ~= 'number' then k = '\"'..k..'\"' end\n         s = s .. '['..k..'] = ' .. dump(v) .. ','\n      end\n      return s .. '} '\n   else\n      return tostring(o)\n   end\nend"},{"name":"Config","isMain":false,"isOpen":false,"content":"--[[\nConfiguration handler\n@author ikubicki\n]]\nclass 'Config'\n\nfunction Config:new(app)\n    self.app = app\n    self:init()\n    return self\nend\n\nfunction Config:getBaseUrl()\n    return self.baseUrl\nend\n\nfunction Config:getToken()\n    return Globals:get('zehnder_atoken')\nend\n\nfunction Config:getSubscriptionKey()\n    return self.subscriptionKey\nend\n\nfunction Config:getDeviceID()\n    return self.deviceID\nend\n\nfunction Config:getBuildingId()\n    return self.buildingId\nend\n\nfunction Config:getTimeoutInterval()\n    return tonumber(self.interval) * 60000\nend\n\nfunction Config:init()\n  self.baseUrl = ''\n  self.subscriptionKey = tostring(self.app:getVariable('SubscriptionKey'))\n  self.deviceID = tostring(self.app:getVariable('DeviceID'))\n  self.buildingId = tostring(self.app:getVariable('BuildingId'))\n  self.interval = self.app:getVariable('Interval')\n\n  if not self.subscriptionKey or self.subscriptionKey == '' then\n    self.app:setVariable('SubscriptionKey','')\n    self.subscriptionKey = ''\n  end\n  if not self.deviceID or self.deviceID == '' then\n    self.app:setVariable('DeviceID','')\n    self.deviceID = ''\n  end\n  if not self.buildingId or self.buildingId == '' then\n    self.app:setVariable('BuildingId','')\n    self.buildingId = ''\n  end\n  if not self.interval or self.interval == '' then\n    self.app:setVariable('Interval','5')\n    self.interval = '5'\n  end\nend"},{"name":"Globals","isMain":false,"isOpen":false,"content":"--[[\nGlobal variables handler\n@author ikubicki\n]]\nclass 'Globals'\n\nfunction Globals:get(name, alternative)\n    local response = api.get('/globalVariables/' .. name)\n    if response then\n        local char = string.sub(response.value, 1, 1)\n        if char == '{' or char == '\"' then\n            return json.decode(response.value)\n        end\n        return response.value\n    end\n    return alternative\nend\n\nfunction Globals:set(name, value)\n    local response = api.put('/globalVariables/' .. name, {\n        name = name,\n        value = json.encode(value)\n    })\n    if not response then\n        response = api.post('/globalVariables', {\n            name = name,\n            value = json.encode(value)\n        })\n        \n    end\n    if response ~= nil then\n        if response.type == 'ERROR' then\n            QuickApp:error('GLOBALS ERROR[' .. response.reason .. ']:', response.message)\n        end\n    end\nend"},{"name":"HTTPClient","isMain":false,"isOpen":false,"content":"--[[\nHTTPClient wrapper\n@author ikubicki\n]]\nclass 'HTTPClient'\n\nfunction HTTPClient:new(options)\n    if not options then\n        options = {}\n    end\n    self.options = options\n    return self\nend\n\nfunction HTTPClient:get(url, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    client:request(self:url(url), self:requestOptions(success, error, 'GET', nil, headers)) \nend\n\nfunction HTTPClient:post(url, data, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers)) \nend\n\nfunction HTTPClient:postForm(url, data, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    headers[\"Content-Type\"] = 'application/x-www-form-urlencoded;charset=UTF-8'\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers, true)) \nend\n\nfunction HTTPClient:put(url, data, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    client:request(self:url(url), self:requestOptions(success, error, 'PUT', data, headers)) \nend\n\nfunction HTTPClient:delete(url, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    client:request(self:url(url), self:requestOptions(success, error, 'DELETE', nil, headers)) \nend\n\nfunction HTTPClient:url(url)\n    if (string.sub(url, 0, 4) == 'http') then\n        return url\n    end\n    if not self.options.baseUrl then\n        self.options.baseUrl = 'http://localhost'\n    end\n    return self.options.baseUrl .. tostring(url)\nend\n\nfunction HTTPClient:requestOptions(success, error, method, data, headers, isFormData)\n    if error == nil then\n        error = function (error)\n            QuickApp:error(json.encode(error))\n        end\n    end\n    if method == nil then\n        method = 'GET'\n    end\n    local options = {\n        checkCertificate = false,\n        method = method,\n        headers = headers,\n    }\n    if data ~= nil then\n        if isFormData then\n            options.data = ''\n            for key, value in pairs(data) do\n                if string.len(options.data) > 0 then \n                    options.data = options.data .. '&'\n                end\n                options.data = options.data .. key .. '=' .. value\n            end\n        elseif type(data) == 'string' then\n            options.data = data\n        else\n            options.data = json.encode(data)\n        end\n    end\n    return {\n        options = options,\n        success = success,\n        error = error\n    }\nend"},{"name":"i18n","isMain":false,"isOpen":false,"content":"--[[\nInternationalization tool\n@author masterlee\n]]\nclass 'i18n'\n\nfunction i18n:new(langCode)\n    if phrases[langCode] == nill then langCode = \"en\" end\n    self.phrases = phrases[langCode]\n    return self\nend\n\nfunction i18n:get(key)\n    if self.phrases[key] then\n        return self.phrases[key]\n    end\n    return key\nend\n\nphrases = {\n    en = {\n        ['search-devices']                  = 'Search devices',\n        ['searching-devices']               = 'Searching...',\n        ['refresh']                         = 'Update data',\n        ['refreshing']                      = 'Updating...',\n        ['last-update']                     = 'Last update at %s',\n        \n        ['timestamp']                       = 'Last update at %s',\n        \n        ['deviceId']                        = 'Serial number: %s',\n        ['timeSeriesType']                  = 'Time Series Type: %s',\n        ['exhaustAirTemp']                  = 'Exhaust Air Temp: %s',\n        ['exhaustSpeed']                    = 'Exhaust Speed: %s',\n        ['exhaustDuty']                     = 'Exhaust Duty: %s',\n        ['systemSupplySpeed']               = 'System Supply Speed: %s',\n        ['systemSupplyDuty']                = 'System Supply Duty: %s',\n        ['currentVentilationPower']         = 'Current Ventilation Power: %s',\n        ['avoidedCooling']                  = 'Avoided Cooling: %s',\n        ['manualMode']                      = 'Manual Mode: %s',\n        ['exhaustFanOff']                   = 'Exhaust Fan Off: %s',\n        ['supplyFanOff']                    = 'Supply Fan Off: %s',\n        ['awayEnabled']                     = 'Away Enabled: %s',\n        ['boostTimerEnabled']               = 'Boost Timer Enabled: %s',\n        ['extractAirHumidity']              = 'Extract Air Humidity: %s',\n        ['exhaustAirHumidity']              = 'Exhaust Air Humidity: %s',\n        ['systemSupplyTemp']                = 'System Supply Temp: %s',\n        ['systemSupplyHumidity']            = 'System Supply Humidity: %s',\n        ['systemOutdoorTemp']               = 'System Outdoor Temp: %s',\n        ['systemOutdoorHumidity']           = 'System Outdoor Humidity: %s',\n        ['exhaustFanAirFlow']               = 'Exhaust Fan Air Flow: %s',\n        ['supplyFanAirFlow']                = 'Supply Fan Air Flow: %s',\n        ['frostDuty']                       = 'Frost Duty: %s',\n        ['bypassDuty']                      = 'Bypass Duty: %s',\n        ['runningMeanOutdoorTemparature']   = 'Running Mean Outdoor Temparature: %s',\n        ['coolingSeason']                   = 'Cooling Season: %s',\n        ['heatingSeason']                   = 'Heating Season: %s',\n        ['requiredTemperature']             = 'Required Temperature: %s',\n        ['analogInput1']                    = 'Analog Input 1: %s',\n        ['analogInput2']                    = 'Analog Input 2: %s',\n        ['analogInput3']                    = 'Analog Input 3: %s',\n        ['analogInput4']                    = 'Analog Input 4: %s',\n        ['avoidedHeating']                  = 'Avoided Heating: %s',\n        ['postSupplyAirTempAfterComfoCool'] = 'Post Supply Air Temp After Comfo Cool: %s',\n        ['exhaustAirTempAfterComfoCool']    = 'Exhaust Air Temp After Comfo Cool: %s',\n        ['postHeaterPresence']              = 'Post Heater Presence: %s',\n        ['hoodPresence']                    = 'Hood Presence: %s',\n        ['hoodIsOn']                        = 'Hood Is On: %s',\n        ['remainingFilterDuration']         = 'Filter: %s days remaining',\n        ['limitRMOTCooling']                = 'Limit RMOT Cooling: %s',\n        ['limitRMOTHeating']                = 'Limit RMOT Heating: %s',\n        ['extractAirTemp']                  = 'Extract Air Temp: %s',\n        ['ventilationPreset']               = 'Ventilation preset: %s',\n        ['comfoCoolCompressorState']        = 'Comfo Cool Compressor State: %s',\n        ['comfortTemperatureMode']          = 'Comfort Temperature Mode: %s',\n        ['passiveTemperatureMode']          = 'Passive Temperature Mode: %s',\n        ['temperatureProfile']              = 'Temperature Profile: %s',\n        ['ventilationMode']                 = 'Ventilation Mode: %s',\n        ['postHeaterMode']                  = 'Post Heater Mode: %s',\n        ['bypassMode']                      = 'Bypass Mode: %s',\n        ['warmProfileTemp']                 = 'Warm Profile Temp: %s',\n        ['coolProfileTemp']                 = 'Cool Profile Temp: %s',\n        ['normalProfileTemp']               = 'Normal Profile Temp: %s',\n        \n        ['ventilationPresetChildName'] = 'Ventilation Speed',\n        ['Away']                       = 'Away',\n        ['Low']                        = 'Low',\n        ['Medium']                     = 'Medium',\n        ['High']                       = 'High',\n        \n        ['remainingFilterDurationChildName'] = 'Filter',\n        ['unitDay']                          = ' day',\n        ['unitDays']                         = ' days',\n        ['unitWeek']                         = ' week',\n        ['unitWeeks']                        = ' weeks',\n        ['replace-filters']                  = 'Replace filters',\n        ['order-filters']                    = 'Order filters',\n        ['remaining-weeks']                  = '%s weeks',\n    },\n    nl = {\n        ['search-devices'] = 'Zoek apparaten',\n        ['searching-devices'] = 'Zoeken...',\n        ['refresh'] = 'Update data',\n        ['refreshing'] = 'Updaten...',\n        ['last-update'] = 'Laatste update om %s',\n        \n        ['timestamp'] = 'Laatste update om %s',\n        \n        ['ventilationPreset']               = 'Ventilatie stand: %s',\n        ['manualMode']                      = 'Manual Mode: %s',\n        ['awayEnabled']                     = 'Away Enabled: %s',\n        ['boostTimerEnabled']               = 'Boost Timer Enabled: %s',\n        ['remainingFilterDuration']         = 'Filter: nog %s dagen resterend',\n        \n        ['extractAirTemp']                  = 'Extract Air Temp: %.1f°C',\n        ['extractAirHumidity']              = 'Extract Air Humidity: %s%%',\n        ['exhaustAirTemp']                  = 'Exhaust Air Temp: %.1f°C',\n        ['exhaustAirHumidity']              = 'Exhaust Air Humidity: %s%%',\n        ['systemSupplyTemp']                = 'System Supply Temp: %s',\n        ['systemSupplyHumidity']            = 'System Supply Humidity: %s%%',\n        ['systemOutdoorTemp']               = 'System Outdoor Temp: %.1f°C',\n        ['systemOutdoorHumidity']           = 'System Outdoor Humidity: %s%%',\n        \n        ['supplyFanOff']                    = 'Supply Fan Off: %s',\n        ['systemSupplySpeed']               = 'Toerental Toevoerventilator: %srpm',\n        ['systemSupplyDuty']                = 'Last Toevoerventilator: %s%%',\n        ['supplyFanAirFlow']                = 'Luchtdebiet Toevoerventilator: %sm³/h',\n        ['exhaustFanOff']                   = 'Exhaust Fan Off: %s',\n        ['exhaustSpeed']                    = 'Toerntal Afvoerventilator: %srpm',\n        ['exhaustDuty']                     = 'Last Afvoerventilator: %s%%',\n        ['exhaustFanAirFlow']               = 'Luchtdebiet Afvoerventilator: %sm³/h',\n        \n        ['currentVentilationPower']         = 'Huidig Ventilatie Stroomverbuik: %sW',\n        ['avoidedHeating']                  = 'Actueel vermeden verwarming: %skW',\n        ['avoidedCooling']                  = 'Actueel vermeden koeling: %skW',\n        \n        ['bypassMode']                      = 'Bypass Mode: %s',\n        ['bypassDuty']                      = 'Bypass Status: %s%%',\n        \n        ['heatingSeason']                   = 'Stookseizoen actueel: %s',\n        ['coolingSeason']                   = 'Koelseizoen actueel: %s',\n        ['limitRMOTHeating']                = 'Verwarmingslimiet RMOT: %.1f°C',\n        ['limitRMOTCooling']                = 'Koellimiet RMOT: %.1f°C',\n        ['runningMeanOutdoorTemparature']   = 'Huidige RMOT: %.1f°C',\n        \n        ['deviceId']                        = 'Serienummer: %s',\n        ['timeSeriesType']                  = 'Time Series Type: %s',\n        ['frostDuty']                       = 'Vorstbescherming: %s%% reductie',\n        ['requiredTemperature']             = 'Required Temperature: %.1f°C',\n        ['analogInput1']                    = 'Analog Input 1: %s',\n        ['analogInput2']                    = 'Analog Input 2: %s',\n        ['analogInput3']                    = 'Analog Input 3: %s',\n        ['analogInput4']                    = 'Analog Input 4: %s',\n        ['postSupplyAirTempAfterComfoCool'] = 'Post Supply Air Temp After Comfo Cool: %.1f°C',\n        ['exhaustAirTempAfterComfoCool']    = 'Exhaust Air Temp After Comfo Cool: %.1f°C',\n        ['postHeaterPresence']              = 'Post Heater Presence: %s',\n        ['hoodPresence']                    = 'Hood Presence: %s',\n        ['hoodIsOn']                        = 'Hood Is On: %s',\n        ['comfoCoolCompressorState']        = 'Comfo Cool Compressor State: %s',\n        ['comfortTemperatureMode']          = 'Comfort Temperature Mode: %s',\n        ['passiveTemperatureMode']          = 'Passive Temperature Mode: %s',\n        ['temperatureProfile']              = 'Temperature Profile: %s',\n        ['ventilationMode']                 = 'Ventilation Mode: %s',\n        ['postHeaterMode']                  = 'Post Heater Mode: %s',\n        ['warmProfileTemp']                 = 'Warm Profile Temp: %.1f°C',\n        ['coolProfileTemp']                 = 'Cool Profile Temp: %.1f°C',\n        ['normalProfileTemp']               = 'Normal Profile Temp: %.1f°C',\n        \n        ['ventilationPresetChildName'] = 'Ventilatie Stand',\n        ['Away']                       = 'Uit',\n        ['Low']                        = 'Laag',\n        ['Medium']                     = 'Midden',\n        ['High']                       = 'Hoog',\n        \n        ['remainingFilterDurationChildName'] = 'Filter',\n        ['unitDay']                          = ' dag',\n        ['unitDays']                         = ' dagen',\n        ['unitWeek']                         = ' week',\n        ['unitWeeks']                        = ' weken',\n        ['replace-filters']                  = 'Vervang filters',\n        ['order-filters']                    = 'Bestel filters',\n        ['remaining-weeks']                  = '%s weken',\n    }\n}"},{"name":"Zehnder","isMain":false,"isOpen":false,"content":"--[[\nZehnder SDK\n@author ikubicki\n]]\nclass 'Zehnder'\n\nfunction Zehnder:new(config)\n  self.config = config\n  self.subscription_key = config:getSubscriptionKey()\n  self.device_id = config:getDeviceID()\n  self.http = HTTPClient:new({\n    baseUrl = config:getBaseUrl()\n  })\n  return self\nend\n\nfunction Zehnder:addAuthHeaders(headers)\n  if headers == nil then headers = {} end\n  headers[\"Authorization\"] = \"Bearer \" .. self.config:getToken()\n  headers[\"x-api-key\"] = self.subscription_key\n  return headers\nend\n\nfunction Zehnder:getData(url, errorMsg, callback)\n  local fail = function(response) QuickApp:error(errorMsg) end\n  local success = function(response)\n    if response.status ~= 200 then fail(response) return end\n    local data = json.decode(response.data)\n    if callback ~= nil then callback(data) end\n  end\n  self.http:get(url, success, fail, self:addAuthHeaders())\nend\n\nfunction Zehnder:getHealth(callback)\n  local url = 'health'\n  local errorMsg = 'Unable to get health of API'\n  self:getData(url, errorMsg, callback)\nend\n\nfunction Zehnder:getDevicesIds(callback)\n  local url = 'devices/ids'\n  local errorMsg = 'Unable to get device ids'\n  self:getData(url, errorMsg, callback)\nend\n\nfunction Zehnder:getDevice(deviceId, callback)\n  local url = 'devices/byid/'..deviceId..'/details'\n  local errorMsg = 'Unable to get device'\n  self:getData(url, errorMsg, callback)\nend\n\nfunction Zehnder:getDeviceState(deviceId, callback)\n  local url = 'devices/'..deviceId..'/state'\n  local errorMsg = 'Unable to get device state'\n  self:getData(url, errorMsg, callback)\nend\n\nfunction Zehnder:getScenes(callback)\n  local url = 'scenes'\n  local errorMsg = 'Unable to get the supported scenes'\n  self:getData(url, errorMsg, callback)\nend\n\nfunction Zehnder:putComfosysCommand(deviceId, commands, callback)\n  local url = 'devices/'..deviceId..'/comfosys/settings'\n  local errorMsg = 'Unable to put the command'\n  local fail = function(response) QuickApp:error(errorMsg) end\n  local success = function(response)\n    --QuickApp:debug(\"Put Command status: \"..response.status)\n    if response.status ~= 200 then fail(response) return end\n    --local data = json.decode(response.data)\n    if callback ~= nil then callback() end\n  end\n  local headers = {}\n  headers[\"Content-Type\"] = \"application/json\"\n  headers[\"Cache-Control\"] = \"no-cache\"\n  local data = json.encode(commands)\n  QuickApp:debug(data)\n  self.http:put(url, data, success, fail, self:addAuthHeaders(headers))\nend\n\nfunction Zehnder:activateScene(buildingId, sceneId, callback)\n  local url = 'scenes/'..buildingId..'/activate/'..sceneId\n  local errorMsg = 'Unable to activate the scene'\n  local fail = function(response) QuickApp:error(errorMsg) end\n  local success = function(response)\n    --QuickApp:debug(\"Activate scene status: \"..response.status)\n    if response.status ~= 200 then fail(response) return end\n    --local data = json.decode(response.data)\n    if callback ~= nil then callback() end\n  end\n  local data = {}\n  self.http:put(url, data, success, fail, self:addAuthHeaders())\nend\n"},{"name":"Childs","isMain":false,"isOpen":false,"content":"--- Child Ventilation Speed ---------------\n\nclass \"ventilationPreset\"(QuickAppChild)\nfunction ventilationPreset:__init(device)\n  QuickAppChild.__init(self, device)\n  self:trace(\"ventilationPreset initiated, deviceId: \", self.id)\nend\nfunction ventilationPreset:turnOn()\n    self:debug(\"multilevel switch turned on\")\n    self:setValue(99)\nend\nfunction ventilationPreset:turnOff()\n    self:debug(\"multilevel switch turned off\")\n    self:setValue(0)    \nend\n-- Value is type of integer (0-99)\nfunction ventilationPreset:setValue(value)\n  if value == nil then value = 0 else value = math.floor(tonumber(value) / 30)*30 end\n  local preset = self.parent.presets[math.floor(tonumber(value) / 30)+1]\n  self:debug(\"Ventilation set to: \".. preset)\n  self.parent:setVentilationPreset(preset)\n  self:updateUI(value)\nend\nfunction ventilationPreset:updateValue()\n  local value = tonumber(self.parent.deviceState.values[\"ventilationPreset\"])\n  self:debug(\"Preset: \"..tostring(value))\n  self:updateUI(value*30)\nend\nfunction ventilationPreset:updateUI(value)\n  local preset = self.parent.presets[math.floor(tonumber(value) / 30)+1]\n  self:updateProperty(\"value\", value)\n  self:updateProperty(\"log\", self.parent.i18n:get(preset))\nend\n\n--- Child Remaining Filter Duration ---------------\n\nclass \"remainingFilterDuration\"(QuickAppChild)\nfunction remainingFilterDuration:__init(device)\n  QuickAppChild.__init(self, device)\n  self:trace(\"remainingFilterDuration initiated, deviceId: \", self.id)\nend\nfunction remainingFilterDuration:updateValue()\n  local value = tonumber(self.parent.deviceState.values[\"remainingFilterDuration\"])\n  if self.properties.value ~= value then\n    if value == nil or value == '' then value = 0 end\n    local w = math.floor(value / 7) --  local d = value % 7\n    self:updateProperty(\"value\",value)\n    if value == 1 then\n      self:updateProperty(\"unit\", self.parent.i18n:get('unitDay'))\n    else\n      self:updateProperty(\"unit\", self.parent.i18n:get('unitDays'))\n    end\n    if w == 0 then\n      self:updateProperty(\"log\", self.parent.i18n:get('replace-filters'))\n    elseif w < 5 then\n      self:updateProperty(\"log\", self.parent.i18n:get('order-filters'))\n    else\n      self:updateProperty(\"log\", string.format(self.parent.i18n:get('remaining-weeks'), w))\n    end\n  end\nend"},{"name":"Toolbox","isMain":false,"isOpen":false,"content":"--[[\n  Toolbox.\n  \n  Additional QuickApp functions for logging and loading other toolbox modules.\n  This is not strictly a \"module\" as it is neccessary for the other modules\n\n  Debug flags:\n  self._SILENT == true will supress startup log messages from the toolbox initialization phase\n  self._2JSON == true will convert tables to json strings before printing (debug etc)\n  self._DEBUG == false will inhibit all self:debug messages\n  self._TRACE == false will inhibit all self:trace messages\n  self._NOTIFY == true will create NotificationCenter messages for self:error and self:warning\n  self._NOTIFYREUSE == true will reuse notifications with same title\n  self._INSTALL_MISSING_MODULES == true will try to install missing modules from githib reppository\n  self._HTML == true will format space/nl with html codes for log with self:*f functions\n  \n  Children will be loaded if there are any children (and module 'child' is loaded)\n  quickAppVariables will be loaded into self.config\n  Ex. a quickAppVariable \"Test\" with value 42 is available as self.config.Test\n\n  function QuickApp:setView(elm,prop,fmt,...)         -- Like updateView but with format\n  function QuickApp:getView(elm,prop)                 -- Get value of view element\n  function QuickApp:setName(name)                     -- Change name of QA\n  --function QuickApp:setType(typ)                      -- Change type of QA\n  function QuickApp:setIconMessage(msg,timeout)       -- Show text under icon, optional timeout to remove message\n  function QuickApp:setEnabled(bool)                  -- Enable/disable QA\n  function QuickApp:setVisible(bool)                  -- Hide/show QA\n  function QuickApp:addInterfaces(interfaces)         -- Add interfaces to QA\n  function QuickApp:notify(priority, title, text)     -- Create notification\n  function QuickApp:debugf(fmt,...)                   -- Like self:debug but with format\n  function QuickApp:tracef(fmt,...)                   -- Like self:trace but with format\n  function QuickApp:errorf(fmt,...)                   -- Like self:error but with format\n  function QuickApp:warningf(fmt,...)                 -- Like self:warning but with format\n  function QuickApp:encodeBase64(data)                -- Base 64 encoder\n  function QuickApp:basicAuthorization(user,password) -- Create basic authorization data (for http requests)\n  function QuickApp:version(<string>)                 -- Return/optional check HC3 version\n\n--]]\n\nlocal QA_toolbox_version = \"0.23\"\nlocal format = string.format\nlocal _init = QuickApp.__init\nlocal _onInit = nil\nToolbox_Module,modules = Toolbox_Module or {},modules or {} -- needs to be globals\n\nfunction QuickApp.__init(self,...) -- We hijack the __init methods so we can control users :onInit() method\n  _onInit = self.onInit\n  self.onInit = self.loadToolbox\n  _init(self,...)\nend\n\n_debugFlags = _debugFlags or { }\nlocal fetchFiles\n\nfunction QuickApp:loadToolbox()\n  if not __fibaro_get_device(self.id).enabled then  \n    self:debug(\"QA \",self.name,\" disabled\")\n    return \n  end\n  if self.properties.model ~= \"ToolboxUser\" then\n    self:updateProperty(\"model\",\"ToolboxUser\")\n  end\n  self.debugFlags = _debugFlags\n  quickApp = self \n  self._2JSON = true             -- Automatically convert tables to json when logging - debug/trace/error/warning\n  self._DEBUG = true             -- False, silence self:debug statements\n  self._TRACE = true             -- Same for self:trace\n  self._HTML = not hc3_emulator  -- Output HTML debug statements (line beaks, spaces)\n  self._NOTIFY = true            -- Automatically call notifyCenter for self:error and self:warning\n  self._UNHANDLED_EVENTS = false -- Log unknow events\n  local d = __fibaro_get_device(self.id)\n  local function printf(...) self:debug(format(...)) end\n  printf(\"QA %s - version:%s (QA toolbox %s)\",self.name,_version or \"1.0\",QA_toolbox_version)\n  if not self.SILENT then\n    printf(\"DeviceId..:%d\",d.id)\n    printf(\"Type......:%s\",d.type)\n    printf(\"Interfaces:%s\",json.encode(d.interfaces or {}))\n    printf(\"Room......:%s\",d.roomID or 0)\n    printf(\"Visible...:%s\",tostring(d.visible))\n    printf(\"Created...:%s\",os.date(\"%c\",d.created or os.time()))\n    printf(\"Modified..:%s\",os.date(\"%c\",d.modified or os.time()))\n  end\n  Toolbox_Module['basic'](self)\n\n  -- Load modules\n  local ms,Module,missingModules = {},Toolbox_Module,{}\n  for _,m in ipairs(modules or {}) do \n    local args = {}\n    if type(m)=='table' then args = m.args or {}; m = m.name end\n    if Module[m] then \n      if not self.SILENT then self:debugf(\"Setup: %s (%s)\",Module[m].name,Module[m].version) end\n      modules[m]=Module[m].init(self,args) \n    else \n      self:warning(\"Module '\"..m..\"' missing\")\n      if self._INSTALL_MISSING_MODULES then\n        missingModules[#missingModules+1]=m\n      else self:warning(\"Set self._INSTALL_MISSING_MODULES=true to load missing modules\") end\n    end\n  end\n\n  local function cont() -- stuff to do when we loaded missing modules...\n    for m,_ in pairs(Module) do Module[m] = nil end\n    self.config = {}\n    for _,v in ipairs(self.properties.quickAppVariables or {}) do\n      self.config[v.name] = v.value\n    end\n    if self.loadChildren then\n      local nc = self:loadChildren()\n      if nc == 0 then self:debug(\"No children\") else self:debugf(\"%d children\",nc) end\n    end\n    self.loadToolbox = function() end\n    if _onInit then _onInit(self) end\n    if self.main and type(self.main)=='function' then setTimeout(function() self:main() end,0) end -- If we have a main(), call it...\n  end\n\n  -- Try to load missing modules\n  if #missingModules > 0 then\n    local  content = {}\n    fetchFiles(missingModules,content,\n      function()\n        if #content>0 then\n          if not hc3_emulator then\n            self:debugf(\"Adding module(s) ..will  restart\")\n            for _,f in ipairs(content) do\n              api.post(\"/quickApp/\"..self.id..\"/files\",f)\n            end\n            plugin.restart(self.id)\n          else self:debugf(\"Can't update offline\") end\n          cont()\n        end \n      end)\n  else cont() end\nend\n\nlocal mpath = \"https://raw.githubusercontent.com/jangabrielsson/EventRunner/master/Toolbox/\"\nlocal moduleMap={\n  childs      = {name=\"Toolbox_child\",      url=mpath..\"Toolbox_child.lua\"},\n  events      = {name=\"Toolbox_events\",     url=mpath..\"Toolbox_events.lua\"},\n  triggers    = {name=\"Toolbox_triggers\",   url=mpath..\"Toolbox_triggers.lua\"},\n  rpc         = {name=\"Toolbox_rpc\",        url=mpath..\"Toolbox_rpc.lua\"},\n  file        = {name=\"Toolbox_files\",      url=mpath..\"Toolbox_files.lua\"},\n  pubsub      = {name=\"Toolbox_pubsub\",     url=mpath..\"Toolbox_pubsub.lua\"},\n  profiler    = {name=\"Toolbox_profiler\",   url=mpath..\"Toolbox_profiler.lua\"},\n  ui          = {name=\"Toolbox_ui\",         url=mpath..\"Toolbox_ui.lua\"},\n  LuaCompiler = {name=\"Toolbox_luacompiler\",url=mpath..\"Toolbox_luacompiler.lua\"},\n  LuaParser   = {name=\"Toolbox_luaparser\",  url=mpath..\"Toolbox_luaparser.lua\"},\n}\n\nfunction fetchFiles(files,content,cont)\n  local req = net.HTTPClient()\n  if #files == 0 then return cont() end\n  local f0 = files[1]\n  table.remove(files,1)\n  local f = moduleMap[f0]\n  if not f then quickApp:errorf(\"No module %s\",f0) return fetchFiles(files,content,cont) end\n  quickApp:debugf(\"Fetching module  %s\",f0)\n  req:request(f.url,{\n      options = {method = 'GET', checkCertificate = false, timeout=20000},\n      success = function(res) \n        if res.status == 200 then\n          content[#content+1]={name=f.name,content=res.data,isMain=false,isOpen=false,type=\"lua\"}\n          fetchFiles(files,content,cont)\n        else quickApp:errorf(\"Error %s fetching file %s\",res.status,f.url) end\n      end,\n      error  = function(res) \n        quickApp:errorf(\"Error %s fetching file %s\",res,f.url)\n        fetchFiles(files,content,cont)\n      end\n    })\nend\n\nfunction Toolbox_Module.basic(self)\n-- tostring optionally converting tables to json or custom conversion\n  local _tostring = tostring\n  self._orgToString= tostring -- good to have sometimes....\n  function tostring(obj) \n    if type(obj)=='table' then\n      if obj.__tostring then return obj.__tostring(obj)\n      elseif self._2JSON then return json.encode(obj) end\n    end\n    return  _tostring(obj) \n  end\n\n  local function _format(fmt,...)\n    local args = {...}\n    if #args == 0 then return fmt end\n    for i,v in ipairs(args) do if type(v)=='table' then args[i]=tostring(v) end end\n    return format(fmt,table.unpack(args))\n  end\n  --self._format = _format \n\n  function assertf(test,...) if not test then error(_format(...)) end end\n\n  local function _print(s,fun,...)\n    local res = {}\n    for _,obj in ipairs({...}) do res[#res+1]=tostring(obj) end\n    res = table.concat(res)\n    fun(s,res)\n    return res\n  end\n\n  local function _printf(self,fun,fmt,...)\n    local str,str2 = _format(fmt,...)\n    str2=str\n    if self._HTML and not hc3_emulator then \n      str2 = str:gsub(\"(\\n)\",\"<br>\")\n      str2 = str:gsub(\"(%s)\",'&nbsp;')\n    end\n    fun(self,str2)\n    return str\n  end\n\n  function self:printTagAndColor(tag,color,fmt,...)\n    assert(fmt,\"print needs tag, color, and args\")\n    fmt = _format(fmt,...)\n    local t = __TAG\n    __TAG = tag or __TAG\n    if hc3_emulator or not color then self:trace(fmt) \n    else\n      self:trace(\"<font color=\"..color..\">\"..fmt..\"</font>\") \n    end\n    __TAG = t\n  end\n\n  function self:encodeBase64(data)\n    local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    return ((data:gsub('.', function(x) \n            local r,b='',x:byte() for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end\n            return r;\n          end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)\n          if (#x < 6) then return '' end\n          local c=0\n          for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end\n          return b:sub(c+1,c+1)\n        end)..({ '', '==', '=' })[#data%3+1])\n  end\n\n-- Create basic authorisation data, used with http requests\n  function self:basicAuthorization(user,password) return \"Basic \"..self:encodeBase64(user..\":\"..password) end\n\n  local HC3version = nil\n  function self:version(version)                 -- Return/optional check HC3 version\n    if HC3version == nil then\n      if hc3_emulator then HC3version=\"5.040.37\"\n      else HC3version = api.get(\"/settings/info\").currentVersion.version end\n    end\n    if version then return version >= HC3version else return version end \n  end\n\n  local function notifyIf(self,p,text)\n    if self._NOTIFY then\n      local title = text:match(\"(.-)[:%s]\") or format(\"%s deviceId:%d\",self.id,self.name)\n      self:notify(p,title,text)\n    end\n    return text\n  end\n\n-- Enhanced debug functions converting tables to json and with formatting version\n  local _debug,_trace,_error,_warning = self.debug,self.trace,self.error,self.warning\n  function self:debug(...) if self._DEBUG then return _print(self,_debug,...) else return \"\" end end\n  function self:trace(...) if self._TRACE then return _print(self,_trace,...) else return \"\" end end\n  function self:error(...) return notifyIf(self,\"critical\",_print(self,_error,...)) end\n  function self:warning(...) return notifyIf(self,\"warning\",_print(self,_warning,...)) end\n  function self:debugf(fmt,...) if self._DEBUG then return _printf(self,_debug,fmt,...) else return \"\" end end\n  function self:tracef(fmt,...) return _printf(self,_trace,fmt,...) end\n  function self:errorf(fmt,...) return notifyIf(self,\"critical\",_printf(self,_error,fmt,...)) end\n  function self:warningf(fmt,...) return notifyIf(self,\"warning\",_printf(self,_warning,fmt,...)) end\n\n-- Like self:updateView but with formatting. Ex self:setView(\"label\",\"text\",\"Now %d days\",days)\n  function self:setView(elm,prop,fmt,...)\n    local str = _format(fmt,...)\n    self:updateView(elm,prop,str)\n  end\n\n-- Get view element value. Ex. self:getView(\"mySlider\",\"value\")\n  function self:getView(elm,prop)\n    assert(type(elm)=='string' and type(prop)=='string',\"Strings expected as arguments\")\n    local function find(s)\n      if type(s) == 'table' then\n        if s.name==elm then return s[prop]\n        else for _,v in pairs(s) do local r = find(v) if r then return r end end end\n      end\n    end\n    return find(api.get(\"/plugins/getView?id=\"..self.id)[\"$jason\"].body.sections)\n  end\n\n-- Change name of QA. Note, if name is changed the QA will restart\n  function self:setName(name)\n    if self.name ~= name then api.put(\"/devices/\"..self.id,{name=name}) end\n    self.name = name\n  end\n\n-- Set log text under device icon - optional timeout to clear the message\n  function self:setIconMessage(msg,timeout)\n    if self._logTimer then clearTimeout(self._logTimer) self._logTimer=nil end\n    self:updateProperty(\"log\", tostring(msg))\n    if timeout then \n      self._logTimer=setTimeout(function() self:updateProperty(\"log\",\"\"); self._logTimer=nil end,1000*timeout) \n    end\n  end\n\n-- Disable QA. Note, difficult to enable QA...\n  function self:setEnabled(bool)\n    local d = __fibaro_get_device(self.id)\n    if d.enabled ~= bool then api.put(\"/devices/\"..self.id,{enabled=bool}) end\n  end\n\n-- Hide/show QA. Note, if state is changed the QA will restart\n  function self:setVisible(bool) \n    local d = __fibaro_get_device(self.id)\n    if d.visible ~= bool then api.put(\"/devices/\"..self.id,{visible=bool}) end\n  end\n\n-- Add interfaces to QA. Note, if interfaces are added the QA will restart\n  local _addInterf = self.addInterfaces\n  function self:addInterfaces(interfaces) \n    local d,map = __fibaro_get_device(self.id),{}\n    for _,i in ipairs(d.interfaces or {}) do map[i]=true end\n    for _,i in ipairs(interfaces or {}) do\n      if not map[i] then\n        _addInterf(self,interfaces)\n        return\n      end\n    end\n  end\n\n  local _updateProperty = self.updateProperty\n  local _props = (api.get(\"/devices/\"..self.id) or {}).properties\n  function self:updateProperty(prop,value)\n    if _props==nil or _props[prop] ~= nil then\n      return _updateProperty(self,prop,value)\n    else self:warningf(\"Trying to update non-existing property - %s\",prop) end\n  end\n-- Change type of QA. Note, if types is changed the QA will restart\n--function QuickApp:setType(typ)\n--  if self.typ ~= typ then api.put(\"/devices/\"..self.id,{type=typ}) end\n--  self.type = typ\n--end\n\n-- Add notification to notification center\n  local cachedNots = {}\n  function self:notify(priority, title, text, reuse)\n    assert(({info=true,warning=true,critical=true})[priority],\"Wrong 'priority' - info/warning/critical\")\n    if reuse==nil then reuse = self._NOTIFYREUSE end\n    local msgId = nil\n    local data = {\n      canBeDeleted = true,\n      wasRead = false,\n      priority = priority,\n      type = \"GenericDeviceNotification\",\n      data = {\n        deviceId = self.id,\n        subType = \"Generic\",\n        title = title,\n        text = tostring(text)\n      }\n    }\n    local nid = title..self.id\n    if reuse then\n      if cachedNots[nid] then\n        msgId = cachedNots[nid]\n      else\n        local notifications = api.get(\"/notificationCenter\")\n        for _,n in ipairs(notifications) do\n          if n.data and n.data.deviceId == self.id and n.data.title == title then\n            msgId = n.id\n            break\n          end\n        end\n      end\n    end\n    if msgId then\n      api.put(\"/notificationCenter/\"..msgId, data)\n    else\n      local d = api.post(\"/notificationCenter\", data)\n      if d then cachedNots[nid] = d.id end\n    end\n  end\n\n  local refs = {}\n  function self:INTERACTIVE_OK_BUTTON(ref) if refs[ref] then refs[ref]() end refs[ref]=nil end\n\n--  self:pushYesNo(\n--    839,                                          -- Mobile ID  (api.get(\"/iosDevices\"))\n--    \"Test\",                                       -- Title\n--    \"Please, press yes\",                          -- Message\n--    function() self:debug(\"User said Yes!\") end,  -- Callback function if user press yes\n--    5*60                                          -- Timout in seconds, after we ignore reply.\n--  )\n\n  function self:pushYesNo(mobileId,title,message,callback,timeout)\n    local ref = self._orgToString({}):match(\"(0x.*)\")\n    api.post(\"/mobile/push\", \n      {\n        category = \"YES_NO\", \n        title = title, \n        message = message, \n        service = \"Device\", \n        data = {\n          actionName = \"INTERACTIVE_OK_BUTTON\", \n          deviceId = self.id, \n          args = {ref}\n        }, \n        action = \"RunAction\", \n        mobileDevices = { mobileId }, \n      })\n    local timer = setTimeout(function() refs[ref]=nil; self:debug(\"Timeout\") end, timeout*1000)\n    timeout = timeout or 20*60\n    refs[ref]=function() clearTimeout(timer) callback() end\n  end\n\n  do -- Used for print device table structs - sortorder for device structs\n    local sortKeys = {\n      'id','name','roomID','type','baseType','enabled','visible','isPlugin','parentId','viewXml','configXml',\n      'interfaces','properties','view', 'actions','created','modified','sortOrder'\n    }\n    local sortOrder={}\n    for i,s in ipairs(sortKeys) do sortOrder[s]=\"\\n\"..string.char(i+64)..\" \"..s end\n    local function keyCompare(a,b)\n      local av,bv = sortOrder[a] or a, sortOrder[b] or b\n      return av < bv\n    end\n\n    function self:prettyJsonStruct(t)\n      local res = {}\n      local function isArray(t) return type(t)=='table' and t[1] end\n      local function isEmpty(t) return type(t)=='table' and next(t)==nil end\n      local function isKeyVal(t) return type(t)=='table' and t[1]==nil and next(t)~=nil end\n      local function printf(tab,fmt,...) res[#res+1] = string.rep(' ',tab)..string.format(fmt,...) end\n      local function pretty(tab,t,key)\n        if type(t)=='table' then\n          if isEmpty(t) then printf(0,\"[]\") return end\n          if isArray(t) then\n            printf(key and tab or 0,\"[\\n\")\n            for i,k in ipairs(t) do\n              local cr = pretty(tab+1,k,true)\n              if i ~= #t then printf(0,',') end\n              printf(tab+1,'\\n')\n            end\n            printf(tab,\"]\")\n            return true\n          end\n          local r = {}\n          for k,v in pairs(t) do r[#r+1]=k end\n          table.sort(r,keyCompare)\n          printf(key and tab or 0,\"{\\n\")\n          for i,k in ipairs(r) do\n            printf(tab+1,'\"%s\":',k)\n            local cr =  pretty(tab+1,t[k])\n            if i ~= #r then printf(0,',') end\n            printf(tab+1,'\\n')\n          end\n          printf(tab,\"}\")\n          return true\n        elseif type(t)=='number' then\n          printf(key and tab or 0,\"%s\",t) \n        elseif type(t)=='boolean' then\n          printf(key and tab or 0,\"%s\",t and 'true' or 'false') \n        elseif type(t)=='string' then\n          printf(key and tab or 0,'\"%s\"',t)\n        end\n      end\n      pretty(0,t,true)\n      return table.concat(res,\"\")\n    end\n  end\n\n  local IPaddress = nil\n  function self:getHC3IPaddress()\n    if IPaddress then return IPaddress end\n    if hc3_emulator then return hc3_emulator.IPaddress\n    else\n      local networkdata = api.get(\"/proxy?url=http://localhost:11112/api/settings/network\")\n      networkdata = networkdata.networkConfig\n      for n,d in pairs(networkdata) do\n        if d.enabled then IPaddress = d.ipConfig.ip; return IPaddress end\n      end\n    end\n  end\n\n  self._Events = {}\n  local eventHandlers = {}\n\n  function self._Events.postEvent(event)\n    for i=1,#eventHandlers do if eventHandlers[i](event) then return end end -- Handler returning true breaks chain\n  end\n\n  function self._Events.addEventHandler(handler,front)\n    for _,h in ipairs(eventHandlers) do if h==handler then return end end\n    if front then table.insert(eventHandlers,1,handler) else eventHandlers[#eventHandlers+1]=handler end\n  end\n\n  function self._Events.removeEventHandler(handler)\n    for i=1,#eventHandlers do if eventHandlers[i]==handler then table.remove(eventHandlers,i) return end end\n  end\n\n  function urlencode(str) -- very useful\n    if str then\n      str = str:gsub(\"\\n\", \"\\r\\n\")\n      str = str:gsub(\"([^%w %-%_%.%~])\", function(c)\n          return (\"%%%02X\"):format(string.byte(c))\n        end)\n      str = str:gsub(\" \", \"%%20\")\n    end\n    return str\t\n  end\n\n  local function syncGet(url,user,pwd)\n    local h,b = url:match(\"(.-)//(.*)\")\n    if pwd then\n      pwd = urlencode(user)..\":\"..urlencode(pwd)..\"@\"\n    else pwd = \"\" end\n    url=h..\"//\"..pwd..b\n    return api.get(\"/proxy?url=\"..urlencode(url))\n  end\n\n\n  local function copy(expr)\n    if type(expr)=='table' then\n      local r = {}\n      for k,v in pairs(expr) do r[k]=copy(v) end\n      return r\n    else return expr end\n  end\n\n  self.util = { copy = copy }\n\n  netSync = { HTTPClient = function (log)   \n      local self,queue,HTTP,key = {},{},net.HTTPClient(),0\n      local _request\n      local function dequeue()\n        table.remove(queue,1)\n        local v = queue[1]\n        if v then \n          if _debugFlags.netSync then self:debugf(\"netSync:Pop %s (%s)\",v[3],#queue) end\n          --setTimeout(function() _request(table.unpack(v)) end,1) \n          _request(table.unpack(v))\n        end\n      end\n      _request = function(url,params,key)\n        params = copy(params)\n        local uerr,usucc = params.error,params.success\n        params.error = function(status)\n          if _debugFlags.netSync then self:debugf(\"netSync:Error %s %s\",key,status) end\n          dequeue()\n          if params._logErr then self:errorf(\" %s:%s\",log or \"netSync:\",tojson(status)) end\n          if uerr then uerr(status) end\n        end\n        params.success = function(status)\n          if _debugFlags.netSync then self:debugf(\"netSync:Success %s\",key) end\n          dequeue()\n          if usucc then usucc(status) end\n        end\n        if _debugFlags.netSync then self:debugf(\"netSync:Calling %s\",key) end\n        HTTP:request(url,params)\n      end\n      function self:request(url,parameters)\n        key = key+1\n        if next(queue) == nil then\n          queue[1]='RUN'\n          _request(url,parameters,key)\n        else \n          if _debugFlags.netSync then self:debugf(\"netSync:Push %s\",key) end\n          queue[#queue+1]={url,parameters,key} \n        end\n      end\n      return self\n    end}\n\n  do\n    local settimeout,setinterval,encode,decode =  -- gives us a better error messages\n    setTimeout, setInterval, json.encode, json.decode\n    local oldClearTimout,oldSetTimout\n\n    if not hc3_emulator then -- Patch short-sighthed setTimeout...\n      clearTimeout,oldClearTimout=function(ref)\n        if type(ref)=='table' and ref[1]=='%EXT%' then ref=ref[2] end\n        oldClearTimout(ref)\n      end,clearTimeout\n\n      setTimeout,oldSetTimout=function(f,ms)\n        local ref,maxt={'%EXT%'},2147483648-1\n        local fun = function() -- wrap function to get error messages\n          local stat,res = pcall(f)\n          if not stat then \n            error(res,2)\n          end\n        end\n        if ms > maxt then\n          ref[2]=oldSetTimout(function() ref[2 ]=setTimeout(fun,ms-maxt)[2] end,maxt)\n        else ref[2 ]=oldSetTimout(fun,ms) end\n        return ref\n      end,setTimeout\n\n      function setInterval(fun,ms) -- can't manage looong intervals\n        return setinterval(function()\n            local stat,res = pcall(fun)\n            if not stat then \n              error(res,2)\n            end\n          end,ms)\n      end\n      function json.decode(...)\n        local stat,res = pcall(decode,...)\n        if not stat then error(res,2) else return res end\n      end\n      function json.encode(...)\n        local stat,res = pcall(encode,...)\n        if not stat then error(res,2) else return res end\n      end\n    end\n  end\n\n  local traceFuns = {\n    'call','get','getValue'\n  }\n\n\nend"},{"name":"Toolbox_child","isMain":false,"isOpen":false,"content":"--[[\n  Toolbox child.\n  \n  Functions to easier create load and handle QuickAppChilds\n\n  function QuickApp:createChild(args)                 -- Create child device, see code below...\n  function QuickApp:numberOfChildren()                -- Returns number of existing children\n  function QuickApp:removeAllChildren()               -- Remove all child devices\n  function QuickApp:callChildren(method,...)          -- Call all child devices with method. \n  function QuickApp:setChildIconPath(childId,path)\n\n--]]\n\nToolbox_Module = Toolbox_Module or {}\nToolbox_Module.childs = {\n  name = \"Child device manager\",\n  author = \"jan@gabrielsson.com\",\n  version = \"0.4\"\n}\n\nfunction Toolbox_Module.childs.init(self)\n\n  function self:setChildIconPath(childId,path)\n    api.put(\"/devices/\"..childId,{properties={icon={path=path}}})\n  end\n\n--Ex. self:callChildren(\"method\",1,2) will call MyClass:method(1,2) \n  function self:callChildren(method,...)\n    for _,child in pairs(self.childDevices or {}) do \n      if child[method] then \n        local stat,res = pcall(child[method],child,...)  \n        if not stat then self:debug(res) end\n      end\n    end\n  end\n\n--Removes all children belonging to this device\n  function self:removeAllChildren()\n    for id,_ in pairs(self.childDevices or {}) do self:removeChildDevice(id) end\n  end\n\n--Returns number of children belonging to this device\n  function self:numberOfChildren()\n    local n = 0\n    for _,_ in pairs(self.childDevices or {}) do n=n+1 end\n    return n\n  end\n\n-- Used before we have a child object. Afterwards we can use child:getVariable(\"var\")\n  function self:getChildVariable(child,varName) \n    for _,v in ipairs(child.properties.quickAppVariables or {}) do\n      if v.name==varName then return v.value end\n    end\n    return \"\"\n  end\n\n  function self:_annotateClass(classObj)\n    if not classObj then return end\n    local stat,res = pcall(function() return classObj._annotated end) \n    if stat and res then return end\n    --self:debug(\"Annotating class\")\n    for _,m in ipairs({\n        \"notify\",\"setType\",\"setVisible\",\"setEnabled\",\"setIconMessage\",\"setName\",\"getView\",\n        \"setView\",\"debug\",\"trace\",\"error\",\"warning\",\"debugf\",\"tracef\",\"errorf\",\"warningf\",\"basicAuthorization\"}) \n    do classObj[m] = self[m] end\n    classObj._annotated = true\n    classObj._2JSON = true\n    classObj._DEBUG = true\n    classObj._TRACE = true\n    classObj._HTML  = true\n    classObj.config,classObj.debugFlags = {},{}\n  end\n\n--[[\n  QuickApp:createChild{\n    className = \"MyChildDevice\",      -- class name of child object\n    name = \"MyName\",                  -- Name of child device\n    type = \"com.fibaro.binarySwitch\", -- Type of child device\n    properties = {},                  -- Initial properties\n    interfaces = {},                  -- Initial interfaces\n  }\n--]]\n  function self:createChild(args)\n    local className = args.className or \"QuickAppChild\"\n    self:_annotateClass(_G[className])\n    local name = args.name or \"Child\"\n    local tpe = args.type or \"com.fibaro.binarySensor\"\n    local properties = args.properties or {}\n    local interfaces = args.interfaces or {}\n    properties.quickAppVariables = properties.quickAppVariables or {}\n    for n,v in pairs(args.quickVars or {}) do table.insert(properties.quickAppVariables,1,{name=n,value=v}) end\n    -- Save class name so we know when we load it next time\n    table.insert(properties.quickAppVariables,1,{name='className', value=className}) -- Add first\n    local child = self:createChildDevice({\n        name = name,\n        type=tpe,\n        initialProperties = properties,\n        initialInterfaces = interfaces\n      },\n      _G[className] -- Fetch class constructor from class name\n    )\n    return child\n  end\n\n-- Loads all children, called automatically at startup\n  function self:loadChildren()\n    local cdevs,n = api.get(\"/devices?parentId=\"..self.id) or {},0 -- Pick up all my children\n    function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n    for _,child in ipairs(cdevs or {}) do\n      local className = self:getChildVariable(child,\"className\")\n      self:_annotateClass(_G[className])\n      local childObject = _G[className] and _G[className](child) or QuickAppChild(child)\n      self.childDevices[child.id]=childObject\n      childObject.parent = self\n      n=n+1\n    end\n    return n\n  end\n\n-- UI handler to pass button clicks to children\n  function self:UIHandler(event)\n    local obj = self\n    if self.id ~= event.deviceId then obj = (self.childDevices or {})[event.deviceId] end\n    if not obj then return end\n    local elm,etyp = event.elementName, event.eventType\n    local cb = obj.uiCallbacks or {}\n    if obj[elm] then return obj:callAction(elm, event) end\n    if cb[elm] and cb[elm][etyp] and self[cb[elm][etyp]] then return obj:callAction(cb[elm][etyp], event) end\n    if obj[elm..\"Clicked\"] then return obj:callAction(elm..\"Clicked\", event) end\n    if self.EM then\n      self:post({type='UI',name=event.elementName,event=event.eventType,value=event.values})\n    else\n      self:warning(\"UI callback for element:\", elm, \" not found.\")\n    end\n  end\nend"}]}